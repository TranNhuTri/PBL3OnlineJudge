@using PBL3.Models
@model List<Comment>
@if(Model != null)
{
    for(int i = 0; i < Model.Count; i++)
    {
        @await Html.PartialAsync("_Comment", Model[i]);
    }
}
<script type="text/javascript">

    function LoadCommentChild(commentId)
    {
        $.ajax({url: '/Comments/CommentChild/' + commentId, success: function(result){
            $('#comment_child' + commentId).html(result);
        }});
        $("#comment-load-child" + commentId).css("display", "none");
    }

    function LoadCommentBox(commentId)
    {
        if($("#editor" + commentId).attr('data-first') == "1")
        {
            CKEDITOR.replace('editor' + commentId, {
                height: '200px',
            });
            $("#editor" + commentId).attr('data-first', "0");
        }
        $("#comment-box" + commentId).css("display", "block");
        document.querySelector("#comment-box" + commentId).scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    function CloseCommentBox(commentId)
    {
        $("#comment-box" + commentId).css("display", "none");
    }

    function PostCommentData(commentId, postId)
    {
        for ( instance in CKEDITOR.instances)
            CKEDITOR.instances[instance].updateElement();

        var content = document.getElementById("editor" + commentId).value;

        let data = new URLSearchParams();
        data.append("rootCommentID", commentId);
        data.append("postID", postId);
        data.append("content", content);

        CKEDITOR.instances["editor" + commentId].setData('');

        fetch('@Url.Action("PostComment", "Comments")', {
            method :'post',
            body : data
        })
        .then(res => {
            if(res.ok)
            {
                return res.text();
            }
        })
        .then(data => {
            if(document.querySelector('#comment_child' + commentId) != null)
            {
                $('#comment_child' + commentId).append(data);
            }
            else
            {
                $('#comment' + commentId).parent().append(data);
            }
            $("#comment-box" + commentId).css("display", "none");
        })
        .catch(err => console.log(err));

        return false;
    }
    function deleteComment(commentId)
    {
        let data = new URLSearchParams();
        data.append("id", commentId);
        fetch('@Url.Action("DeleteCommentAPI", "Comments")', {
            method :'post',
            body : data
        })
        .then(res => res.text())
        .then(data =>{;
            if(data == "true")
            {
                $("#comment" + commentId).css("display", "none");
                $("#comment_tool" + commentId).css("display", "none");
            }
        })
    }
    function LikeComment(commentId)
    {
        document.querySelector("#comment_tool_like" + commentId).classList.toggle("comment_tool_like--active");

        let data = new URLSearchParams();
        data.append("commentID", commentId);

        fetch('@Url.Action("LikeComment", "Comments")', {
            method :'post',
            body : data
        })
        .then(res => {
            fetch('@Url.Action("GetNumberLikesOfComment", "Comments")' + '/' + commentId)
            .then(res => res.text())
            .then(data => {
                if(data > 0)
                {
                    $('#comment_likes' + commentId).css("opacity", "1");
                }
                else
                {
                    $('#comment_likes' + commentId).css("opacity", "0");
                }
                $('#comment_numlikes' + commentId).html(data)
            })
        })
    }
</script>