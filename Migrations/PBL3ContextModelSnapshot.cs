// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PBL3.Data;

namespace PBL3.Migrations
{
    [DbContext(typeof(PBL3Context))]
    partial class PBL3ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PBL3.Models.Article", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("PBL3.Models.ArticleAuthor", b =>
                {
                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.HasKey("ArticleID", "AuthorID");

                    b.HasIndex("AuthorID");

                    b.ToTable("ArticleAuthor");
                });

            modelBuilder.Entity("PBL3.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("PBL3.Models.Problem", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Difficulty")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MemoryLimit")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeCreate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("TimeLimit")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Problem");
                });

            modelBuilder.Entity("PBL3.Models.ProblemAuthor", b =>
                {
                    b.Property<string>("ProblemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.HasKey("ProblemID", "AuthorID");

                    b.HasIndex("AuthorID");

                    b.ToTable("ProblemAuthor");
                });

            modelBuilder.Entity("PBL3.Models.ProblemCategory", b =>
                {
                    b.Property<string>("ProblemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("ProblemID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProblemCategory");
                });

            modelBuilder.Entity("PBL3.Models.Submission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Time")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProblemID");

                    b.HasIndex("UserID");

                    b.ToTable("Submission");
                });

            modelBuilder.Entity("PBL3.Models.SubmissionResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionID")
                        .HasColumnType("int");

                    b.Property<int>("TestCaseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SubmissionID");

                    b.HasIndex("TestCaseID");

                    b.ToTable("SubmissionResult");
                });

            modelBuilder.Entity("PBL3.Models.TestCase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Input")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ProblemID");

                    b.ToTable("TestCase");
                });

            modelBuilder.Entity("PBL3.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeAccount")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PBL3.Models.ArticleAuthor", b =>
                {
                    b.HasOne("PBL3.Models.Article", "Article")
                        .WithMany("ArticleAuthors")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PBL3.Models.User", "Author")
                        .WithMany("ArticleAuthors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("PBL3.Models.ProblemAuthor", b =>
                {
                    b.HasOne("PBL3.Models.User", "Author")
                        .WithMany("ProblemAuthors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PBL3.Models.Problem", "Problem")
                        .WithMany("ProblemAuthors")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("PBL3.Models.ProblemCategory", b =>
                {
                    b.HasOne("PBL3.Models.Category", "Category")
                        .WithMany("ProblemCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PBL3.Models.Problem", "Problem")
                        .WithMany("ProblemCategories")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("PBL3.Models.Submission", b =>
                {
                    b.HasOne("PBL3.Models.Problem", "Problem")
                        .WithMany("Submissions")
                        .HasForeignKey("ProblemID");

                    b.HasOne("PBL3.Models.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PBL3.Models.SubmissionResult", b =>
                {
                    b.HasOne("PBL3.Models.Submission", "Submission")
                        .WithMany("SubmissionResults")
                        .HasForeignKey("SubmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PBL3.Models.TestCase", "TestCase")
                        .WithMany("SubmitResults")
                        .HasForeignKey("TestCaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("PBL3.Models.TestCase", b =>
                {
                    b.HasOne("PBL3.Models.Problem", "Problem")
                        .WithMany("TestCases")
                        .HasForeignKey("ProblemID");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("PBL3.Models.Article", b =>
                {
                    b.Navigation("ArticleAuthors");
                });

            modelBuilder.Entity("PBL3.Models.Category", b =>
                {
                    b.Navigation("ProblemCategories");
                });

            modelBuilder.Entity("PBL3.Models.Problem", b =>
                {
                    b.Navigation("ProblemAuthors");

                    b.Navigation("ProblemCategories");

                    b.Navigation("Submissions");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("PBL3.Models.Submission", b =>
                {
                    b.Navigation("SubmissionResults");
                });

            modelBuilder.Entity("PBL3.Models.TestCase", b =>
                {
                    b.Navigation("SubmitResults");
                });

            modelBuilder.Entity("PBL3.Models.User", b =>
                {
                    b.Navigation("ArticleAuthors");

                    b.Navigation("ProblemAuthors");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
